/* Сброс стилей и базовые настройки */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

:root {
    /* Цветовая палитра */
    --bg-primary: #121212;
    --bg-secondary: #1e1e1e;
    --bg-tertiary: #2d2d2d;
    --text-primary: #ffffff;
    --text-secondary: #b0b0b0;
    --accent-primary: #4a6cf7;
    --accent-hover: #5a7bf9;
    --success: #4ade80;
    --danger: #f87171;
    --warning: #fbbf24;
    
    /* Размеры */
    --border-radius: 12px;
    --spacing-xs: 4px;
    --spacing-sm: 8px;
    --spacing-md: 16px;
    --spacing-lg: 24px;
    --spacing-xl: 32px;
    
    /* Тени */
    --shadow-sm: 0 2px 8px rgba(0, 0, 0, 0.2);
    --shadow-md: 0 4px 16px rgba(0, 0, 0, 0.3);
    
    /* Анимации */
    --transition-fast: 0.15s ease;
    --transition-normal: 0.3s ease;
}

body {
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    background-color: var(--bg-primary);
    color: var(--text-primary);
    line-height: 1.6;
    min-height: 100vh;
    padding: var(--spacing-md);
}

.container {
    max-width: 800px;
    margin: 0 auto;
}

/* Заголовок */
.header {
    text-align: center;
    margin-bottom: var(--spacing-xl);
    padding-top: var(--spacing-md);
}

.header h1 {
    font-size: 2.2rem;
    font-weight: 700;
    margin-bottom: var(--spacing-sm);
    background: linear-gradient(90deg, var(--accent-primary), #8a8aff);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
}

.header p {
    color: var(--text-secondary);
    font-size: 1.1rem;
}

/* Вкладки */
.tabs {
    display: flex;
    gap: var(--spacing-sm);
    margin-bottom: var(--spacing-lg);
    justify-content: center;
    flex-wrap: wrap;
}

.tab-btn {
    flex: 1;
    min-width: 100px;
    padding: var(--spacing-sm) var(--spacing-md);
    background: var(--bg-tertiary);
    border: none;
    border-radius: var(--border-radius);
    color: var(--text-secondary);
    font-weight: 500;
    cursor: pointer;
    transition: var(--transition-normal);
    position: relative;
    overflow: hidden;
}

.tab-btn::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 3px;
    background: var(--accent-primary);
    transform: scaleX(0);
    transform-origin: right;
    transition: transform var(--transition-normal);
}

.tab-btn.active {
    color: var(--text-primary);
    background: var(--bg-secondary);
}

.tab-btn.active::after {
    transform: scaleX(1);
    transform-origin: left;
}

.tab-btn:hover:not(.active) {
    background: var(--bg-secondary);
    color: var(--text-primary);
}

/* Панель управления */
.controls {
    display: flex;
    flex-wrap: wrap;
    gap: var(--spacing-md);
    margin-bottom: var(--spacing-lg);
    align-items: center;
}

.search-container {
    flex: 1;
    min-width: 200px;
    position: relative;
}

.search-container input {
    width: 100%;
    padding: var(--spacing-sm) var(--spacing-md) var(--spacing-sm) calc(var(--spacing-md) + 24px);
    background: var(--bg-tertiary);
    border: 1px solid var(--bg-secondary);
    border-radius: var(--border-radius);
    color: var(--text-primary);
    font-size: 1rem;
    transition: var(--transition-normal);
}

.search-container input:focus {
    outline: none;
    border-color: var(--accent-primary);
    box-shadow: 0 0 0 3px rgba(74, 108, 247, 0.2);
}

.search-icon {
    position: absolute;
    left: var(--spacing-md);
    top: 50%;
    transform: translateY(-50%);
    color: var(--text-secondary);
    width: 16px;
    height: 16px;
}

.sort-controls {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-xs);
    min-width: 150px;
}

.sort-controls label {
    font-size: 0.875rem;
    color: var(--text-secondary);
}

.sort-controls select {
    padding: var(--spacing-sm) var(--spacing-md);
    background: var(--bg-tertiary);
    border: 1px solid var(--bg-secondary);
    border-radius: var(--border-radius);
    color: var(--text-primary);
    font-size: 1rem;
    cursor: pointer;
    appearance: none;
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23b0b0b0' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M2 5l6 6 6-6'/%3e%3c/svg%3e");
    background-repeat: no-repeat;
    background-position: right 0.75rem center;
    background-size: 16px 12px;
}

.btn {
    padding: var(--spacing-sm) var(--spacing-md);
    border-radius: var(--border-radius);
    border: none;
    font-weight: 600;
    cursor: pointer;
    transition: var(--transition-normal);
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: var(--spacing-xs);
}

.btn-primary {
    background: var(--accent-primary);
    color: white;
}

.btn-primary:hover {
    background: var(--accent-hover);
}

.btn-secondary {
    background: var(--bg-tertiary);
    color: var(--text-primary);
}

.btn-secondary:hover {
    background: var(--bg-secondary);
}

.btn-danger {
    background: var(--danger);
    color: white;
}

.btn-danger:hover {
    opacity: 0.9;
}

.btn-sm {
    padding: var(--spacing-xs) var(--spacing-sm);
    font-size: 0.875rem;
}

/* Форма добавления товара */
.add-item-form {
    background: var(--bg-secondary);
    padding: var(--spacing-lg);
    border-radius: var(--border-radius);
    margin-bottom: var(--spacing-lg);
    box-shadow: var(--shadow-sm);
}

.form-group {
    margin-bottom: var(--spacing-md);
}

.form-group:last-child {
    margin-bottom: 0;
}

.warning {
    color: var(--danger);
    font-size: 0.875rem;
    font-weight: 500;
}

.form-group input[type="text"],
.form-group input[type="number"] {
    width: 100%;
    padding: var(--spacing-sm) var(--spacing-md);
    background: var(--bg-tertiary);
    border: 1px solid var(--bg-secondary);
    border-radius: var(--border-radius);
    color: var(--text-primary);
    font-size: 1rem;
    transition: var(--transition-normal);
}

.form-group input:focus {
    outline: none;
    border-color: var(--accent-primary);
    box-shadow: 0 0 0 3px rgba(74, 108, 247, 0.2);
}

.input-with-btn {
    display: flex;
    gap: var(--spacing-sm);
}

.input-with-btn input {
    flex: 1;
}

/* Стили для чекбоксов */
.checkbox-label {
    display: flex;
    align-items: center;
    gap: var(--spacing-sm);
    cursor: pointer;
    user-select: none;
}

.checkbox-label input[type="checkbox"] {
    width: 18px;
    height: 18px;
    accent-color: var(--accent-primary);
}

/* Список товаров */
.items-list {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-md);
}

.item-card {
    background: var(--bg-secondary);
    border-radius: var(--border-radius);
    padding: var(--spacing-md);
    box-shadow: var(--shadow-sm);
    transition: var(--transition-normal);
    animation: fadeIn 0.3s ease;
}

.item-card:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-md);
}

.item-header {
    display: flex;
    justify-content: space-between;
    align-items: start;
    margin-bottom: var(--spacing-md);
    gap: var(--spacing-md);
}

.item-title {
    font-size: 1.25rem;
    font-weight: 600;
    word-break: break-word;
}

.item-meta {
    display: flex;
    gap: var(--spacing-sm);
    margin-bottom: var(--spacing-md);
    flex-wrap: wrap;
    color: var(--text-secondary);
    font-size: 0.8rem;
}

.item-prices {
    display: flex;
    flex-wrap: wrap;
    gap: var(--spacing-sm);
    margin-bottom: var(--spacing-md);
}

.price-tag {
    background: var(--bg-tertiary);
    padding: var(--spacing-xs) var(--spacing-sm);
    border-radius: var(--border-radius);
    font-size: 0.875rem;
    display: flex;
    align-items: center;
    gap: var(--spacing-xs);
}

.price-value {
    font-weight: 600;
}

.item-stats {
    padding-top: var(--spacing-md);
    border-top: 1px solid var(--bg-tertiary);
}

.avg-price {
    font-size: 1.125rem;
    font-weight: 700;
    color: var(--success);
}

.edit-btn {
    background: var(--bg-tertiary);
    color: var(--text-primary);
    border: none;
    border-radius: 8px;
    padding: var(--spacing-xs) var(--spacing-sm);
    cursor: pointer;
    transition: var(--transition-fast);
    display: flex;
    align-items: center;
    gap: var(--spacing-xs);
    flex-shrink: 0;
}

.edit-btn:hover {
    background: var(--bg-primary);
}

.gov-cost {
    margin-top: var(--spacing-xs);
    color: var(--warning);
    font-weight: 500;
    font-size: 0.9rem;
}

/* Пустое состояние */
.empty-state {
    text-align: center;
    padding: var(--spacing-xl) var(--spacing-md);
    color: var(--text-secondary);
    border: 2px dashed var(--bg-tertiary);
    border-radius: var(--border-radius);
}

.empty-icon {
    margin-bottom: var(--spacing-md);
    color: var(--accent-primary);
}

.empty-state h3 {
    font-size: 1.5rem;
    margin-bottom: var(--spacing-sm);
    color: var(--text-primary);
}

/* Модальное окно */
.modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.7);
    z-index: 1000;
    justify-content: center;
    align-items: center;
    animation: fadeIn 0.3s ease;
    padding: var(--spacing-md);
}

.modal-content {
    background: var(--bg-secondary);
    border-radius: var(--border-radius);
    width: 100%;
    max-width: 500px;
    max-height: 90vh;
    overflow-y: auto;
    box-shadow: var(--shadow-md);
    display: flex;
    flex-direction: column;
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--spacing-md);
    border-bottom: 1px solid var(--bg-tertiary);
    flex-shrink: 0;
}

.modal-header h3 {
    font-size: 1.25rem;
}

.close-btn {
    background: none;
    border: none;
    font-size: 1.5rem;
    color: var(--text-secondary);
    cursor: pointer;
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    transition: var(--transition-fast);
}

.close-btn:hover {
    background: var(--bg-tertiary);
    color: var(--text-primary);
}

.modal-body {
    padding: var(--spacing-md);
    overflow-y: auto;
}

.modal-body .form-group {
    margin-bottom: var(--spacing-md);
}

.modal-body label {
    display: block;
    margin-bottom: var(--spacing-xs);
    color: var(--text-secondary);
    font-weight: 500;
    font-size: 0.9rem;
}

.price-list {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-sm);
    margin-bottom: var(--spacing-md);
}

.edit-price-item {
    display: flex;
    align-items: center;
    gap: var(--spacing-sm);
    padding: var(--spacing-sm);
    background: var(--bg-tertiary);
    border-radius: var(--border-radius);
}

.edit-price-details {
    flex-grow: 1;
    font-size: 0.9rem;
}

.edit-price-details .main-price {
    font-weight: 700;
    color: var(--success);
}

.edit-price-details .sub-details {
    font-size: 0.8rem;
    color: var(--text-secondary);
}

.remove-edit-price {
    padding: 0;
    width: 24px;
    height: 24px;
    font-size: 1.2rem;
    background: var(--danger);
    color: white;
    border: none;
    border-radius: 50%;
    cursor: pointer;
    line-height: 1;
    flex-shrink: 0;
}

.add-price-container {
    padding: var(--spacing-md);
    margin-top: var(--spacing-md);
    border: 1px solid var(--bg-tertiary);
    border-radius: var(--border-radius);
}

.add-price-container .input-group {
    display: flex;
    gap: var(--spacing-sm);
    margin-bottom: var(--spacing-sm);
}
#add-calculated-price-btn {
    width: 100%;
}
.calculated-price-preview {
    font-size: 0.9rem;
    color: var(--success);
    margin-bottom: var(--spacing-sm);
    min-height: 1.2em;
}

.modal-footer {
    display: flex;
    gap: var(--spacing-sm);
    padding: var(--spacing-md);
    border-top: 1px solid var(--bg-tertiary);
    flex-shrink: 0;
}

/* Адаптивность */
@media (max-width: 600px) {
    .controls {
        flex-direction: column;
        align-items: stretch;
    }
    
    .item-header {
        flex-direction: column;
        align-items: stretch;
        gap: var(--spacing-sm);
    }
    
    .tabs {
        justify-content: flex-start;
        overflow-x: auto;
        padding-bottom: 8px;
    }
}

/* Анимации */
@keyframes fadeIn {
    from { opacity: 0; transform: scale(0.95); }
    to { opacity: 1; transform: scale(1); }
}

/* Скроллбар */
::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: var(--bg-primary);
}

::-webkit-scrollbar-thumb {
    background: var(--bg-tertiary);
    border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
    background: var(--bg-secondary);
}```

### `script.js`
*(Логика была значительно переписана: изменен `addItem`, полностью переделана работа модального окна для «Вещей», обновлен `calculateAveragePrice` для работы со смешанным массивом цен)*
```javascript
// Price Tracker — стабильная реализация
const PriceTracker = {
    currentTab: 'skins',
    currentItemInModal: null, // Хранит ссылку на редактируемый товар
    data: {
        skins: [],
        accessories: [],
        items: [],
        cars: [],
        houses: []
    },

    init() {
        this.loadFromStorage();
        this.bindEvents();
        this.switchTab(this.currentTab);
    },

    bindEvents() {
        // Навигация
        document.querySelectorAll('.tab-btn').forEach(btn => {
            btn.addEventListener('click', (e) => this.switchTab(e.target.dataset.tab));
        });

        // Формы
        document.getElementById('item-form').addEventListener('submit', (e) => {
            e.preventDefault();
            this.addItem();
        });
        document.getElementById('item-name').addEventListener('input', () => this.checkDuplicate());
        document.getElementById('edit-name').addEventListener('input', () => this.checkEditDuplicate());
        
        // Управление
        document.getElementById('search-input').addEventListener('input', () => this.render());
        document.getElementById('sort-select').addEventListener('change', () => this.render());
        document.getElementById('export-btn').addEventListener('click', () => this.exportData());

        // Модальное окно: основные действия
        document.getElementById('close-modal').addEventListener('click', () => this.closeModal());
        document.getElementById('save-changes-btn').addEventListener('click', () => this.saveChanges());
        document.getElementById('delete-item-btn').addEventListener('click', () => this.deleteItem());

        // Модальное окно: логика добавления цен
        document.getElementById('calculate-per-unit-checkbox').addEventListener('change', this.togglePriceInputMode.bind(this));
        document.getElementById('add-price-btn').addEventListener('click', this.addStandardPrice.bind(this));
        document.getElementById('add-calculated-price-btn').addEventListener('click', this.addCalculatedPrice.bind(this));
        ['new-total-cost', 'new-quantity'].forEach(id => {
            document.getElementById(id).addEventListener('input', this.updateCalculatedPricePreview.bind(this));
        });
    },

    switchTab(tab) {
        if (!tab) return;
        this.currentTab = tab;

        document.querySelectorAll('.tab-btn').forEach(btn => {
            btn.classList.toggle('active', btn.dataset.tab === tab);
        });

        document.getElementById('gov-cost-container').style.display = (tab === 'cars' || tab === 'houses') ? 'block' : 'none';
        
        this.resetForm();
        document.getElementById('search-input').value = '';
        this.render();
    },

    resetForm() {
        document.getElementById('item-form').reset();
        this.checkDuplicate();
    },

    checkDuplicate: (name, warningEl) => {
        const inputName = name || document.getElementById('item-name').value;
        const warning = warningEl || document.getElementById('duplicate-warning');
        warning.style.display = inputName && this.isDuplicate(inputName) ? 'block' : 'none';
    },

    checkEditDuplicate: () => {
        const name = document.getElementById('edit-name').value;
        const warning = document.getElementById('edit-duplicate-warning');
        warning.style.display = name && this.isDuplicate(name, this.currentItemInModal.id) ? 'block' : 'none';
    },

    isDuplicate(name, excludeId = null) {
        const normalizedName = name.toLowerCase().trim();
        if (!normalizedName) return false;
        return this.data[this.currentTab].some(item =>
            item.name.toLowerCase().trim() === normalizedName && item.id !== excludeId
        );
    },

    addItem() {
        const nameInput = document.getElementById('item-name');
        const name = nameInput.value.trim();
        if (!name || this.isDuplicate(name)) {
            alert('Название товара не может быть пустым или дублироваться.');
            return;
        }

        const newItem = {
            id: Date.now().toString(),
            name,
            prices: [],
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString(),
        };

        if (this.currentTab === 'cars' || this.currentTab === 'houses') {
            const cost = parseFloat(document.getElementById('gov-cost').value);
            if (!isNaN(cost) && cost >= 0) newItem.cost = cost;
        }

        this.data[this.currentTab].push(newItem);
        this.saveToStorage();
        this.render();
        this.resetForm();
    },

    render() {
        const container = document.getElementById('items-list');
        const emptyState = document.getElementById('empty-state');
        const searchTerm = document.getElementById('search-input').value.toLowerCase();
        const sortOption = document.getElementById('sort-select').value;

        let itemsToRender = this.data[this.currentTab].filter(item =>
            item.name.toLowerCase().includes(searchTerm)
        );

        itemsToRender = this.sortItems(itemsToRender, sortOption);
        container.innerHTML = '';

        if (itemsToRender.length === 0) {
            emptyState.style.display = 'block';
        } else {
            emptyState.style.display = 'none';
            itemsToRender.forEach(item => container.appendChild(this.createItemCard(item)));
        }
    },

    createItemCard(item) {
        const card = document.createElement('div');
        card.className = 'item-card';
        
        const avgPrice = this.calculateAveragePrice(item.prices);
        const suffix = this.currentTab === 'items' ? ' ₽/шт' : ' ₽';

        const pricesHTML = item.prices.length > 0
            ? item.prices.map(p => {
                const priceValue = typeof p === 'object' ? p.perUnit : p;
                return `<div class="price-tag"><span class="price-value">${this.formatNumber(priceValue)}${suffix}</span></div>`;
            }).join('')
            : `<span style="color: var(--text-secondary); font-size: 0.9rem;">Нет цен</span>`;

        card.innerHTML = `
            <div class="item-header">
                <div>
                    <h3 class="item-title">${this.escapeHtml(item.name)}</h3>
                    ${item.cost !== undefined ? `<div class="gov-cost">Стоимость: ${this.formatNumber(item.cost)} ₽</div>` : ''}
                </div>
                <button class="edit-btn">Редактировать</button>
            </div>
            <div class="item-meta">Добавлено: ${this.formatDate(item.createdAt)}</div>
            <div class="item-prices">${pricesHTML}</div>
            <div class="item-stats">
                <div class="avg-price">Средняя цена: ${this.formatNumber(avgPrice)}${suffix}</div>
            </div>`;

        card.querySelector('.edit-btn').addEventListener('click', () => this.openEditModal(item.id));
        return card;
    },

    openEditModal(itemId) {
        this.currentItemInModal = this.data[this.currentTab].find(i => i.id === itemId);
        if (!this.cu
